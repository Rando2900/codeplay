<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Buscador - Code-Play</title>
    <link rel="stylesheet" href="stylesheets/buscador.css">
</head>
<body>
    <%- include('partials/header') %>

    <!-- Sidebar -->
    <div class="result">
        <div class="sidebar">
            <h2>Filtrar por</h2>
            <a href="#" onclick="setFilter('proyectos')">Proyectos</a>
            <a href="#" onclick="setFilter('usuarios')">Usuarios</a>
        </div>
        
        <!-- Contenido de b√∫squeda -->
        <div class="main-content">
            <div class="search-bar">
                <input type="text" id="searchInput" placeholder="Buscar..." oninput="searchData()">
            </div>
            
            <div class="results" id="results-container">
                <p>Introduce un t√©rmino de b√∫squeda...</p>
            </div>
        </div>
    </div>
    
    <script>
let currentFilter = "proyectos";

// Manejo de cambio de filtro en la barra lateral
document.querySelectorAll(".sidebar a").forEach(link => {
    link.addEventListener("click", function(event) {
        event.preventDefault();
        currentFilter = this.textContent.toLowerCase();
    console.log("Filtro cambiado a:", currentFilter);
        searchData(); // Actualiza los resultados cuando cambias de filtro
    });
});

// Funci√≥n para buscar los datos
async function searchData() {
    const searchTerm = document.getElementById('searchInput').value.trim();
    if (searchTerm.length === 0) {
        document.getElementById('results-container').innerHTML = '<p>Introduce un t√©rmino de b√∫squeda...</p>';
        return;
    }

    console.log("Buscando:", searchTerm, "en", currentFilter);

    try {
        const response = await fetch(`/api/${currentFilter}?query=${encodeURIComponent(searchTerm)}`);
        if (!response.ok) throw new Error(`Error en la API: ${response.status}`);

        const data = await response.json();
        console.log("Datos recibidos:", data);

        if (!Array.isArray(data)) {
            throw new Error("Los datos recibidos no son un array.");
        }

        displayResults(data);
    } catch (error) {
        console.error("Error al obtener resultados:", error);
        document.getElementById('results-container').innerHTML = '<p>Error al cargar los resultados.</p>';
    }
}

// Funci√≥n para mostrar los resultados en la p√°gina
function displayResults(data) {
    const resultsContainer = document.getElementById('results-container');
    resultsContainer.innerHTML = '';

    if (data.length === 0) {
        resultsContainer.innerHTML = '<p>No se encontraron resultados.</p>';
        return;
    }

    data.forEach(project => {
        const card = document.createElement('div');
        card.classList.add('project-card');

        // ‚û§ Previsualizaci√≥n del proyecto en iframe
        const iframe = document.createElement('iframe');
        iframe.srcdoc = `
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <style>${project.css}</style>
            </head>
            <body>
                ${project.html}
                <script> ${project.js.replace(/<\/script>/g, "<\\/script>")} <\/script>
            </body>
            </html>
        `;
        iframe.width = "100%";
        iframe.height = "200px";
        iframe.style.border = "1px solid #ccc";

        // ‚û§ T√≠tulo del proyecto
        const titleElement = document.createElement('h2');
        titleElement.textContent = project.title || 'Proyecto Sin T√≠tulo';

        // ‚û§ Bot√≥n "Ver Proyecto"
        const viewButton = document.createElement('button');
        viewButton.textContent = 'Ver Proyecto';
        viewButton.addEventListener('click', () => window.location.href = `/project?id=${project._id}`);

        // ‚û§ Bot√≥n de Like
        const likeButton = document.createElement('button');
        likeButton.classList.add('heart-button');
        likeButton.textContent = project.liked ? `‚ù§Ô∏è ${project.likes}` : `ü§ç ${project.likes}`;
        likeButton.addEventListener('click', async () => {
            try {
                const response = await fetch(`/api/projects/${project._id}/like`, { method: 'POST', credentials: 'include' });
                if (!response.ok) throw new Error('Error al actualizar like');

                const data = await response.json();
                project.likes = data.likes;
                project.liked = data.liked;
                likeButton.textContent = data.liked ? `‚ù§Ô∏è ${data.likes}` : `ü§ç ${data.likes}`;
            } catch (error) {
                console.error('Error:', error);
            }
        });

        // ‚û§ Creador del proyecto
        const creatorContainer = document.createElement('div');
        creatorContainer.classList.add('creator-container');

        const creatorName = document.createElement('p');
        creatorName.classList.add('project-creator');
        creatorName.innerHTML = `Creado por: <button class='creator-button' onclick="window.location.href='perfil_usuario?id=${project.userId?._id}'">${project.userId?.usuario || 'An√≥nimo'}</button>`;

        creatorContainer.appendChild(creatorName);

        // ‚û§ Agregar elementos al contenedor principal
        card.appendChild(titleElement);
        card.appendChild(iframe);
        card.appendChild(viewButton);
        card.appendChild(likeButton);
        card.appendChild(creatorContainer);

        resultsContainer.appendChild(card);
    });


    // Evento para ver perfil de usuario
    document.querySelectorAll('.ver-perfil').forEach(button => {
        button.addEventListener('click', function () {
            const userId = this.getAttribute('data-id');
            window.location.href = `/perfil_usuario?id=${userId}`;
        });
    });

    // Evento para ver proyecto
    document.querySelectorAll('.ver-proyecto').forEach(button => {
        button.addEventListener('click', function () {
            const projectId = this.getAttribute('data-id');
            window.location.href = `/project?id=${projectId}`;
        });
    });
}







        
       
function renderResults(data) {
    const resultsContainer = document.getElementById('results');
    resultsContainer.innerHTML = '';

    if (data.length === 0) {
        resultsContainer.innerHTML = '<p>No se encontraron resultados.</p>';
        return;
    }

    data.forEach(item => {
        const div = document.createElement('div');
        div.classList.add('result-item');
        div.innerHTML = `<h3>${item.title || item.usuario || item.nombre}</h3>`;
        resultsContainer.appendChild(div);
    });
        async function searchData() {
    const searchTerm = document.getElementById('searchInput').value.trim();
    if (searchTerm.length === 0) {
        document.getElementById('results-container').innerHTML = '<p>Introduce un t√©rmino de b√∫squeda...</p>';
        return;
    }

    try {
        console.log("Buscando:", searchTerm); // Verificar en la consola si el evento se activa

        const response = await fetch(`/api/proyectos?query=${encodeURIComponent(searchTerm)}`);
        if (!response.ok) throw new Error('Error en la API');
        
        const data = await response.json();
        console.log("Datos recibidos:", data); // Verificar qu√© datos devuelve la API
        displayResults(data);
    } catch (error) {
        console.error('Error al obtener resultados:', error);
        document.getElementById('results-container').innerHTML = '<p>Error al cargar los resultados.</p>';
    }
}

async function searchData() {
    const searchTerm = document.getElementById('searchInput').value.trim();
    if (searchTerm.length === 0) {
        document.getElementById('results-container').innerHTML = '<p>Introduce un t√©rmino de b√∫squeda...</p>';
        return;
    }

    console.log("Buscando:", searchTerm, "en", currentFilter);

    try {
        // üìå Asegurar que la API se llama correctamente dependiendo del filtro seleccionado
        let endpoint = currentFilter === "usuarios" ? "/api/users/search" : "/api/projects/search";
        const response = await fetch(`${endpoint}?query=${encodeURIComponent(searchTerm)}`);
        
        if (!response.ok) throw new Error(`Error en la API: ${response.status}`);

        const data = await response.json();
        console.log("Datos recibidos:", data);

        if (!Array.isArray(data)) {
            throw new Error("Los datos recibidos no son un array.");
        }

        displayResults(data);
    } catch (error) {
        console.error("Error al obtener resultados:", error);
        document.getElementById('results-container').innerHTML = '<p>Error al cargar los resultados.</p>';
    }
}


}


    </script>

<%- include('partials/footer') %>
</body>
</html>
